{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AvatarService {\n  constructor() {\n    this.avatarColors = ['#FF5733', '#33FF57', '#3357FF', '#F333FF', '#FF33F3', '#33FFF3', '#F3FF33', '#FF3333', '#33FF33', '#3333FF'];\n    this.avatarShapes = ['circle', 'square', 'triangle', 'diamond', 'star'];\n  }\n  generateRandomAvatar() {\n    const color = this.avatarColors[Math.floor(Math.random() * this.avatarColors.length)];\n    const shape = this.avatarShapes[Math.floor(Math.random() * this.avatarShapes.length)];\n    // Using a simple SVG-based avatar\n    return `data:image/svg+xml,${encodeURIComponent(`\n      <svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n        <${shape} x=\"10\" y=\"10\" width=\"80\" height=\"80\" fill=\"${color}\" />\n      </svg>\n    `)}`;\n  }\n  static {\n    this.ɵfac = function AvatarService_Factory(t) {\n      return new (t || AvatarService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AvatarService,\n      factory: AvatarService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AvatarService","constructor","avatarColors","avatarShapes","generateRandomAvatar","color","Math","floor","random","length","shape","encodeURIComponent","factory","ɵfac","providedIn"],"sources":["C:\\Employee Management\\employee-management\\src\\app\\services\\avatar.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AvatarService {\r\n  private readonly avatarColors = [\r\n    '#FF5733', '#33FF57', '#3357FF', '#F333FF', '#FF33F3',\r\n    '#33FFF3', '#F3FF33', '#FF3333', '#33FF33', '#3333FF'\r\n  ];\r\n\r\n  private readonly avatarShapes = [\r\n    'circle', 'square', 'triangle', 'diamond', 'star'\r\n  ];\r\n\r\n  generateRandomAvatar(): string {\r\n    const color = this.avatarColors[Math.floor(Math.random() * this.avatarColors.length)];\r\n    const shape = this.avatarShapes[Math.floor(Math.random() * this.avatarShapes.length)];\r\n    \r\n    // Using a simple SVG-based avatar\r\n    return `data:image/svg+xml,${encodeURIComponent(`\r\n      <svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <${shape} x=\"10\" y=\"10\" width=\"80\" height=\"80\" fill=\"${color}\" />\r\n      </svg>\r\n    `)}`;\r\n  }\r\n} "],"mappings":";AAKA,OAAM,MAAOA,aAAa;EAH1BC,YAAA;IAImB,KAAAC,YAAY,GAAG,CAC9B,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EACrD,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CACtD;IAEgB,KAAAC,YAAY,GAAG,CAC9B,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,CAClD;;EAEDC,oBAAoBA,CAAA;IAClB,MAAMC,KAAK,GAAG,IAAI,CAACH,YAAY,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,IAAI,CAACN,YAAY,CAACO,MAAM,CAAC,CAAC;IACrF,MAAMC,KAAK,GAAG,IAAI,CAACP,YAAY,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,IAAI,CAACL,YAAY,CAACM,MAAM,CAAC,CAAC;IAErF;IACA,OAAO,sBAAsBE,kBAAkB,CAAC;;WAEzCD,KAAK,+CAA+CL,KAAK;;KAE/D,CAAC,EAAE;EACN;;;uBApBWL,aAAa;IAAA;EAAA;;;aAAbA,aAAa;MAAAY,OAAA,EAAbZ,aAAa,CAAAa,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}